<?npl
--[[
Title: website of a user
Author: wuxiangan
Date: 2016/11/29
]]

include_once("./abstract/base.page");
include_once("./site_group.page");

local elastic_search = inherit(models.abstract.base, gettable("models.elastic_search"))

-- 提交到搜索引擎
function elastic_search:api_submitToES(params)
	log(params, true)
	local url = "http://221.0.111.131:19001/Application/kwupsert"
	System.os.GetUrl({
		url=url,
		method="POST",
		form = params,
	}, function(code, data)
		--log(data, true)
	end)
end

-- 提价用户信息 用户表记录
function elastic_search:api_submitUserinfo(params)
	if not params.username then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	local url = "/" .. params.username
	local content = ""
	
	-- 填充搜索信息
	content = content .. "\n" .. (params.username or "")
	content = content .. "\n" .. (params.displayName or "")
	content = content .. "\n" .. (params.introduce or "")
	content = content .. "\n" .. (params.cellphone or "")
	content = content .. "\n" .. (params.location or "")
	
	--params.username = nil
	params.email = nil
	params.password = nil
	params.isadmin = nil
	params.roleId = nil
	params.vipLevel = nil
	params.cellphone = nil

	local extra_data = toJson(params)

	self:api_submitToES({
		url=url,
		access_url = (request:header("Host") or "") .. url,
		user_name = params.username,
		extra_type = "userinfo",
		extra_search= content,
		extra_data=extra_data,
	})

	return errors:wrap(nil)
end

-- 提交站点信息 站点表记录
function elastic_search:api_submitSiteinfo(params)
	params.sitename = params.name
	params.tags = params.tags or ""

	if not params.username or not params.sitename then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	-- url
	local url = "/" .. params.username .. "/" .. params.sitename
	local content = ""
	local tags = ""

	for tag in string.gmatch(params.tags, "[^|]+") do 
		tags = tags .. "[" .. tag .. "]"
	end

	-- 填充搜索信息
	--content = content .. "\n" .. (params.username or "")
	content = content .. "\n" .. (params.sitename or "")
	content = content .. "\n" .. (params.displayName or "")
	content = content .. "\n" .. (params.desc or "")
	content = content .. "\n" .. (tags)

	local extra_data = toJson(params)
	if params.visibility == "private" then
		extra_data = toJson({
			username=params.username,
			sitename=params.sitename,
			visibility=params.visibility,
		})
	end
	

	local data = {
		url=url, 
		access_url = (request:header("Host") or "") .. url,
		tags = tags,
		user_name = params.username,
		site_name = params.sitename,
		extra_type = "siteinfo",
		extra_search = content,
		extra_data = extra_data,
	}

	if params.visibility == "private" then
		data.extra_type = "siteinfo:" .. self:api_getUserStr(params).data
	else
		data.extra_type = "siteinfo:[]"
	end

	self:api_submitToES(data)

	return errors:wrap(nil)
end

function elastic_search:api_getUserStr(params)
	if not params.username or not params.sitename then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	local siteGroupDB = models.site_group:new()
	local userlist = siteGroupDB:api_getGuestUserList(params).data or {}

	local str = "[" .. params.username .. "]"
	for _, username in ipairs(userlist or {}) do
		str = str .. "[" .. username .. "]"
	end

	return errors:wrap(nil, str)
end

-- 提交网页信息
function elastic_search:api_submitPageinfo(params)
	--if not params.username or not params.sitename or not params.pagename then
		--return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	--end

    local pageinfo = params.pageinfo or {}
    local content = params.content
    local tags = ""
    
    params.tags = params.tags or ""
	params.pageinfo = nil
	params.extra_type = "pageinfo"
	params.content = nil
	params.extra_data = toJson(pageinfo)
    
    for tag in string.gmatch(params.tags, "[^|]+") do   --tags识别形式 tag1|tag2|tag3,在es中形如[tag1][tag2][tag3]
		tags = tags .. "[" .. tag .. "]"
	end

    --将tag加入搜索信息中
    content = content .. "\n" .. (tags or "")
    params.extra_search = content

	--log(pageinfo)
	if pageinfo.visibility == "private" then
		params.extra_type = "pageinfo:" .. self:api_getUserStr(pageinfo).data
	else
		params.extra_type = "pageinfo:[]"
	end
	
	self:api_submitToES(params)

	return errors:wrap(nil)
end

-- 网络爬虫提交数据 
function elastic_search:api_spiderSubmitPageinfo(params)
	if not params.content or not params.filepath then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	params.filepath = string.gsub(params.filepath, ".md", "")
	local content = params.content
	--local url = "/keepwork/baike" .. params.filepath
	local url = params.filepath
	local username = "keepwork"
	local sitename = "baike"
	local pagename = params.filepath
	local content = params.content

	local data = {
		url = url,
		username = username,
		sitename = sitename,
		pagename = pagename,
		content = content,
	}

	local pageinfo = {
		url = url, 
		access_url = (request:header("Host") or "") .. url,
		content = content,
		user_name = "keepwork",
		sitename = "baike",
		extra_data = toJson(data),
		extra_type = "pageinfo",
		extra_search = content,
	}

	self:api_submitToES(pageinfo)

	return errors:wrap(nil)
end


-------------------------------------------------------new version----------------------------------------------------
elastic_search.host = "http://127.0.0.1:9200/kwindex"  --可从配置文件读取
local mdwiki = NPL.load('../helpers/md/mdwiki.lua')
mdwiki.set_wiki_mod_path("../js/mod/")


--检验及提交page信息
function elastic_search:api_upsertPage(params)
    local page = {}

    -- 用户认证 如ensureAuthenticated

    if ((not params.username) or (not params.sitename) or 
        (not params.pagename) or (not params.access_url ) or
        (not params.url) or (not params.pagetype)) then
        return errors:wrap(errors.REQUEST_PARAMS_ERROR)
    end

    page.type = 'page'
    page.username = params.username
    page.sitename = params.sitename
    page.pagename = params.pagename
    page.access_url = params.access_url
    page.url = params.url
    page.pagetype = params.pagetype
    page.visibility = params.visibility

    -- content tags 处理
    if (page.visibility) and (page.visibility == "private") then
        page.content = "THIS IS A PRIVATE WEBPAGE!"
    else
        page.content, page.tags = self:content_handler(params.content)
    end

    self:upsertToES(page)
    -- return errors:wrap(nil)
    return errors:wrap(nil, page)
end


--提取tags，处理content(待完善)
function elastic_search:content_handler(content)
    local new_content = content
    local tags = {}

    local locate_tags = commonlib.split(content, "\n")[1]  --用正则表达式匹配
    locate_tags = commonlib.split(locate_tags, " ")

    if (locate_tags[2] == "tags") and (#locate_tags > 4) then  -- {'<!--', 'tags', ':', tag1,...,"-->"}
        local count = 0
        for i = 4, (#locate_tags - 1) do
            table.insert(tags, locate_tags[i])
            count = count + 1
            if (count == 5) then break end  -- 最多支持5个tags
        end
    end

    -- 去除md语法
    content = string.gsub(content, "<!%-%-[%w%W]-%-%->", '', 1)
    content = string.gsub(content, "[#%-%|%*]+", '')
    content = string.gsub(content, "!-%[[%w%W]-%]%([%w%W]-%)", '')
    content = string.gsub(content, "\n", ' ')
    content = string.gsub(content, " +", ' ')

    new_content = mdwiki.render(content)

    return new_content, tags
end


--提交数据至ES
function elastic_search:upsertToES(params)
    params.flag = "upsertToES"
    log(params, true)
    params.flag = nil

    if (not params.type) or (params.type == "") then
        return errors:wrap(errors.REQUEST_PARAMS_ERROR)
    end

    -- 查询后若存在则转为更新
    -- 处理type为page时
    local query_table = {}
    if params.access_url then
        query_table.access_url = params.access_url
        query_table.type = params.type
    end

    local pageInfo = self:getBySingleField(query_table)
    
    if (pageInfo.data.hits) and (#pageInfo.data.hits.hits == 1) then
        params._id = pageInfo.data.hits.hits[1]._id
        return self:updateById(params)
    end

    -- 处理参数，生成url
    -- local index = "keepwork"  可通过参数 params.index params.type指定
    local type = params.type
    -- local upsert_to = format("%s/%s/%s", self.host, index, type)
    local upsert_to = format("%s/%s", self.host, type)
    local now = ParaGlobal.GetDateFormat("yyyy-MM-dd ") .. ParaGlobal.GetTimeFormat("H:mm:ss ") .. "+0800"
    

    params.type = nil
    params.create_time = now
    params.update_time = now

    System.os.GetUrl({
        url = upsert_to,
        method = "POST",
        json = true,
        form = params
    }, resume)

    local err, result = yield()
    return errors:wrap(err, result.data)
end


-- 删除数据,只能通过id
function elastic_search:deleteBySingleField(params)
    -- params.flag = "delete"
    -- log(params, true)
    -- params.flag = nil

    if (not params.type) or (params.type == "") then
        return errors:wrap(errors.REQUEST_PARAMS_ERROR)
    end

    -- 查询该page是否存在，获取id
    local query_table = {}

    if params.access_url then
        query_table.access_url = params.access_url
        query_table.type = params.type
    end

    local pageInfo = self:getBySingleField(query_table)

    if (pageInfo.data.hits) and (#pageInfo.data.hits.hits == 1) then
        params._id = pageInfo.data.hits.hits[1]._id
    else
        return errors:wrap(errors.REQUEST_PARAMS_ERROR)
    end

    -- local index = "keepwork"  --可通过参数 params.index params.type指定
    local type = params.type
    local _id = params._id 
    -- local delete_to = format("%s/%s/%s/%s", self.host, index, type, _id)
    local delete_to = format("%s/%s/%s", self.host, type, _id)

    System.os.GetUrl({
        url = delete_to,
        method = "DELETE",
    }, resume)

    local err, result = yield()
    return errors:wrap(err, result.data)
end


-- 更新数据,只能通过id
function elastic_search:updateById(params)
    -- params.flag = "update"
    -- log(params, true)
    -- params.flag = nil

    if (not params._id) or (not params.type) or (params.type == "") then
        return errors:wrap(errors.REQUEST_PARAMS_ERROR)
    end

    -- local index = "keepwork"  --可通过参数 params.index params.type指定
    local type = params.type
    local _id = params._id
    -- local update_to = format("%s/%s/%s/%s/_update", self.host, index, type, _id)
    local update_to = format("%s/%s/%s/_update", self.host, type, _id)
    local now = ParaGlobal.GetDateFormat("yyyy-MM-dd ") .. ParaGlobal.GetTimeFormat("H:mm:ss ") .. "+0800"

    params.type = nil
    params._id = nil
    params.username = nil
    params.update_time = now
    params.content, params.tags = self:content_handler(params.content)

    --设为部分更新
    local update_table = {
        doc = params
    }

    System.os.GetUrl({
        url = update_to,
        method = "POST",
        json = true,
        form = update_table
    }, resume)

    local err, result = yield()
    return errors:wrap(err, result.data)
end


-- 精确搜索，只支持单字段搜索,不返回评分
function elastic_search:getBySingleField(params)
    -- params.flag = "getBySingleField"
    -- log(params, true)
    -- params.flag = nil

    -- local index = "keepwork"
    local type = ""
    if params.type then
        type = params.type .. "/"
        params.type = nil
    end
    -- local search_in = format("%s/%s/%s_search", self.host, index, type)
    local search_in = format("%s/%s_search", self.host, type)

    if params.access_url then
        params["access_url.keyword"] = params.access_url
        params.access_url = nil
    end

    -- params.flag = "getBySingleField"
    -- log(params, true)
    -- params.flag = nil

    -- 精确搜索时使用filter提高搜索效率
    local query_table = {
                    query = {
                        constant_score = { 
                                    filter = {
                                        term = params
                        }
                    }
                }
            }

    System.os.GetUrl({
        url = search_in,
        method = "GET",
        json = true,
        form = query_table,
    }, resume)

    local err, result = yield()
    return errors:wrap(err, result.data)
end


--------------------------------------------search--------------------------------------------------------
-- 参数解析、处理、传递给search
function elastic_search:params_parser(params)
    local new_params = {}
    new_params.keyword = params.q
    -- new_params.advanced = params.advanced -- 暂时不提供高级搜索，只提供全文搜索
    new_params.range = params.range
    new_params.sort = params.sort  -- 缺省时默认按照搜索得分降序排列，使用高级搜索时可指定排序规则
    new_params.from = params.from

    if (params.type) then
        new_params.type = params.type
    else
        new_params.type = ""  -- 默认搜索种类为所有
    end

    if (params.highlight) then
        new_params.highlight = params.highlight
    else
        new_params.highlight = true  -- 默认开启高亮
    end

    if (not new_params.advanced) and (new_params.type == "page") then
        new_params.fields = {'tags', 'content', 'username', 'sitename', 'pagename'}  -- 默认搜索字段
    else
        new_params.fields = params.fields
    end

    if (not params.size) or (tonumber(params.size) > 500) then
        new_params.size = 500  -- 限制返回数量
    else
        new_params.size = params.size
    end



    if new_params.advanced then  -- 高级功能，暂不启用
        new_params.must = params.must
        new_params.must_not = params.must_not
        new_params.should = params.should
        new_params.range = params.range
    end

    return new_params
end


-- 搜索入口
function elastic_search:api_search(params)
    --解析参数
    params = self:params_parser(params)

    -- 普通搜索参数检验
    if (not params.keyword) and (not params.advanced) then
        return errors:wrap(errors.REQUEST_PARAMS_ERROR)
    end

    -- 高级搜索参数检验
    if params.advanced then
        if ((not params.must) and (not params.should)) and (not (params.keyword and params.fields)) then
            return errors:wrap(errors.REQUEST_PARAMS_ERROR)
        end
        
        -- 使用高级搜索时不建议直接传入普通的 keyword 和 fields的形式，故fields 不支持两个以上
        if (params.fields) and (#params.fields > 1) then
            return errors:wrap(errors.REQUEST_PARAMS_ERROR)
        end
    end

    -- local index = "keepwork"
    local type = ""

    if params.type then
        type = params.type .. "/"
        params.type = nil
    end

    -- local search_in = format("%s/%s/%s_search", self.host, index, type)
    local search_in = format("%s/%s_search", self.host, type)
    local query_table = {}

    -- 生成查询表
    if params.advanced then
        query_table = self:advanced_query_table_generator(params)
    else
        query_table = self:query_table_generator(params)
    end

    -- 高亮处理
    if params.highlight then
        query_table.highlight = {fields = self:highlight_fields_generator(params)}
    end

    -- 排序处理
    if params.sort then
        query_table.sort = params.sort      -- array
    end

    -- 分页、返回数量处理
    query_table.size = params.size
    query_table.from = params.from

    -- return query_table
    return self:get_search_result(query_table, search_in)
end


function elastic_search:highlight_fields_generator(params)
    local highlight_fields = {}

    -- 高级搜索高亮字段处理
    if params.advanced then
        if params.must then
            for i, condition in ipairs(params.must) do
                for k, v in pairs(condition) do
                    if (k == "match" or "term") then
                        for field, _ in pairs(v) do
                            highlight_fields[field] = {}
                        end
                    end
                end
            end
        end

        if params.should then
            for i, condition in ipairs(params.should) do
                for k, v in pairs(condition) do
                    if (k == "match" or "term") then
                        for field, _ in pairs(v) do
                            highlight_fields[field] = {}
                        end
                    end
                end
            end
        end
    end

    -- 普通搜索高亮字段处理
    if params.fields then
        for i, field in ipairs(params.fields) do
            highlight_fields[field] = {}
        end
    end

    return highlight_fields
end


--[[ 
处理ES查询语法
params.keyword 输入关键词，多词情况下用空格分隔
params.fields为匹配字段组成的数组
params.term 为是否精确搜索，缺省为全文搜索，params.term = true时为精确搜索
params.highlight= true时返回高亮
]]
function elastic_search:query_table_generator(params)
    local query_table = {}
    local query = {}

    -- 精确搜索，限单字段
    if params.term then
        
        -- 多词处理
        if (string.find(params.keyword, " ")) then
            local terms = {}
            local keywords = commonlib.split(params.keyword, " ")
            table.insert(keywords, params.keyword)
            terms[params.fields[1]] = keywords
            query = {terms = terms}

        -- 单词处理
        else
            local term = {}
            term[params.fields[1]] = params.keyword
            query = {term = term}
        end

    else
        -- 单字段全文搜索，支持多词
        if (#params.fields == 1) then
            local match = {}
            match[params.fields[1]] = params.keyword
            query = {match = match}

        -- 多字段全文搜索，支持多词
        elseif (#params.fields > 1) then
                query = {
                multi_match = {
                    query = params.keyword,   --string
                    fields = params.fields   --array
                    }
                }
        end
    end

    query_table.query = query
    return query_table
end


--[[
高级搜索，params.advanced = true 时进入

params.should,   params.must, params.must_not可输入由条件组成的数组，条件格式如下：
    {"match":{"tags":"sports"}} 模糊匹配
    {"term":{"username":"Tim"}} 精确匹配

params.keyword 和 单字段的params.fields传入会成为默认的should条件，
如需支持更多条件可传入should条件

完整query_table如下

    query_table = {
            "query" : {
                "bool" : {
                    "should"   :   [condition1, condition2],
                    "must"     :   [condition3, condition4],
                    "must_not" :   [condition5, condition6],
                    "filter" :{
                        condition7,condition8
                }
            }
        }
]]

function elastic_search:advanced_query_table_generator(params)
    local query_table = {}
    local bool = {}
    local should = {}
    local match = {}

    -- 确保有搜索短语

    if (params.fields) and (#params.fields == 1) then
        match[params.fields[1]] = params.keyword
    end

    local default_condition = {match = match}

    if params.should then
        should = params.should
    end

    table.insert(should, default_condition)
    bool.should = should   --  array of conditions,至少一条件要满足，如果满足会增加匹配分数

    if params.must then
        bool.must = params.must   --  array of conditions,搜索结果必须满足
    end

    if params.must_not then
        bool.must_not = params.must_not   -- array of conditions,搜索结果必须不满足
    end

    if params.range then
        bool.filter = {range = params.range}   --设置筛选范围
    end

    query_table.query= {bool = bool}

    return query_table
end


-- 向ES发送请求
function elastic_search:get_search_result(query_table, search_in)
    if (query_table == {}) or (search_in == "") then
        return errors:wrap(errors.REQUEST_PARAMS_ERROR)
    end

    System.os.GetUrl({
        url = search_in,
        method = "GET", 
        json = true,
        form = query_table
    }, resume)

    local err, result = yield()
    return errors:wrap(err, result.data)
end


--------------------------------------------rebuild scripts--------------------------------------------------
--确保不误触发脚本
local not_dumpped = false

function elastic_search:api_resetDump()
    not_dumpped = true
    return errors:wrap(nil)
end


-- 迁移脚本
function elastic_search:api_dump()
    -- if (not not_dumpped) then
    --     return errors:wrap(errors.REQUEST_PARAMS_ERROR)
    -- end

    local exported_data = self:export()
    local data_list, scroll_id = self:data_list_generator(exported_data)
    
    while (#data_list > 0) do
        self:import(data_list)
        exported_data = self:export({scroll_id = scroll_id})
        data_list, scroll_id = self:data_list_generator(exported_data)
    end

    not_dumpped = false 
    return errors:wrap(nil,tb)
end


-- 导出原索引数据
function elastic_search:api_export(params)
    local params = params or {}
    params.scroll_id = params.scroll_id or nil
    local type = "page"
    local search_in = format("http://127.0.0.1:9200/kwindex/%s/_search?scroll=1m", type)
    local query_table = {
            query = {
                range = {
                    create_time = {
                        gte=  "2017-12-18 00:00:00 +0800",
                        lt=   "2017-12-25 00:00:00 +0800"
            }
        }
    },
        sort = {"create_time"},
        size = 1
    }

    if (params.scroll_id) then
        query_table = {
            scroll_id = params.scroll_id,
            scroll = "1m"
        }
        search_in = "http://127.0.0.1:9200/_search/scroll"
    end

    -- log(query_table, true)

    System.os.GetUrl({
        url = search_in,
        method = "GET", 
        json = true,
        form = query_table
    }, resume)

    local err, result = yield()

    return result
end


-- 处理老数据，修改数据结构
function elastic_search:data_list_generator(params)
    if (params.rcode ~= 200) then
        return errors:wrap(nil,params)
    end

    local data_list = {}
    local scroll_id = params.data._scroll_id

    if (params.data.hits) and (#params.data.hits.hits ~= 0) then
        local hits, cleaned_data, source

        hits = params.data.hits.hits

        for i, data in ipairs(hits) do
            source = data._source
            cleaned_data = {
                access_url = source.access_url,
                url = source.url,
                id = data._id,
                user_name = source.username,
                site_name = source.sitename,
                page_name = source.pagename,
                create_time = source.create_time,
                page_type = "normal",
            }

            cleaned_data.content, cleaned_data.tags = self:content_handler(source.content or "")
            cleaned_data.update_time = source.update_time or source.create_time

            if (#source.tags ~= 0) then
                cleaned_data.tags = source.tags
            end

            table.insert(data_list, cleaned_data)
        end
    end

    return data_list, scroll_id
end

-- 导入新索引
function elastic_search:import(data_list)
    local upsert_to = "http://127.0.0.1:9200/keepwork_v2/page/_bulk"
    local data_to_import = ""
    local data_tostring
    local tags

    for i, data in ipairs(data_list) do
        data_tostring = ''
        for k, v in pairs(data) do
            if (k == 'tags') then
                tags = ''
                for _, tag in ipairs(v) do
                    tag = tags .. tag .. ','
                end
                
                tags = '[' .. tags .. ']'
                data_tostring = data_tostring .. format('"%s":%s,', k, tags)
            else
                if (k ~= "id") then
                    data_tostring = data_tostring .. format('"%s":"%s",', k, v)
                end
            end
        end

        data_to_import = data_to_import .. format('{"index":{"_id":"%s"}}\n', data.id)
        data_to_import = data_to_import .. format('{%s}\n', data_tostring)
    end

    data_to_import = string.gsub(data_to_import, "%,%}", "}")
    data_to_import = string.gsub(data_to_import, "%,%]", "]")

    System.os.GetUrl({
        url = upsert_to,
        -- method = "POST",
        json = true,
        postfields = data_to_import
    }, resume)

    return errors:wrap(yield())

    -- return data_to_import
end


--------------------------------------------test code----------------------------------------------------------
function elastic_search:api_testDump()
    local exported_data = self:export()
    local data_list, scroll_id = self:data_list_generator(exported_data)

    for i = 1, 3 do
        exported_data = self:export({scroll_id = scroll_id})
        data_list, scroll_id = self:data_list_generator(exported_data)
    end


    return tostring(#data_list)
end


function elastic_search:api_testSearch()
    params = {}
    params.type = "page"
    params.from = 0
    params.size = 100
    -- params.fields = {"full_text",'content'}
    params.q = "厉害"
    -- params.term = true

    -- params.advanced = true
    params.highlight = true
    -- params.must_not = {{match={username = "william"}}}
    -- params.range = {
    --     age = {gte = 197}
    -- }

    params.sort = {{age = {order="desc"}}}

    return self:api_search(params)  
end


function elastic_search:api_testUpsert(params)
    local data      
    local content
    local f = function(i) if (i%5 ~= 0) then return "normal" else return "profile" end end
    for i = 1, 1 do
        data = {
            type = "page",
            access_url = "localhost:8099/william/home/test" .. i,
            url = "/william/home/test" .. i,
            username = "william",
            sitename  = "home",
            pagename = "test212" .. i,
            content = [[
                <!-- tags : tag1 tag2 tag3 -->
                # 
                ## 我是个非常热爱生活的人
                ### 
                **这是粗体**
                *这是斜体*
                - 表格
                1. 哎哟厉害哦
                > 闪电似的
                | 这是表格| 表格信息 |
                | -- | -- |
                | ok | 厉害 |
                ---
                [链接](/william0911/home1/hash4567)
                ![图片](
                ```@wiki/js/bigfile
                {
                    "fileId":"483","fileType":"audio/ogg",
                "extraMsg":"horse.ogg","channel":"qiniu"
                }
                ```
                ```
                ```
                ```@wiki/js/resumeHeader
                {
                    "backgroundImage": "",
                    "portrait": "",
                    "username": "逍遥",
                    "baseInfo": "男 本科 3年工作经验 深圳",
                    "company": "xxx",
                    "cellphone": "180*******",
                    "email": "sdsdsassd@qq.com",
                    "introduce": "我是一个边学习边分享的人。关于读书、关于影视剧、关于足球， 所学，所思，所感，所闻，分享一切有趣的、有用的。"
                }
                ```]] .. i,
            age = i,
            pagetype = f(i),
            pageid = i
        }

        content = self:api_upsertPage(data)
    end

    return content
end


function elastic_search:api_testUpdate(params)
    return self:update(params)
end


function elastic_search:api_testDelete(params)
    return self:deleteBySingleField(params)
end


function elastic_search:api_testParamsParser()
    params = {}
    params.q = "william"
    return self:params_parser(params)
end


function elastic_search:api_testContentHandler()
    local content = [[]]
        local params = {}
        params.new_content, params.tags = self:content_handler(content)
    -- return errors:wrap(nil,params)
    return params.new_content
end



function elastic_search:api_testRender()
    local content = mdwiki.render([[
        ```@wiki/js/resumeHeader
        {
            "backgroundImage": "",
            "portrait": "",
            "username": "逍遥",
            "baseInfo": "男 本科 3年工作经验 深圳",
            "company": "xxx",
            "cellphone": "180*******",
            "email": "sdsdsassd@qq.com",
            "introduce": "我是一个边学习边分享的人。关于读书、关于影视剧、关于足球， 所学，所思，所感，所闻，分享一切有趣的、有用的。"
        }]])

        return content
end

function elastic_search:api_testMultiUpsert()
    local upsert_to = "http://127.0.0.1:9200/keepwork/page/"
    local f = function(i) if (i%5 ~= 0) then return "normal" else return "profile" end end
    local data = {}
    local finish_count
    local reply = {}
    local limit = 50
    local times = 10
    local err, data

    for j = 1,times do
        finish_count = 0
        for i = 1, limit do
            data = {
                type = "page",
                access_url = "localhost:8099/william/home/test" .. i,
                url = "/william/home/test" .. i,
                tags = {"tag".. i},
                username = "william",
                sitename  = "home",
                pagename = "test" .. i,
                create_time = ParaGlobal.GetDateFormat("yyyy-MM-dd ") .. ParaGlobal.GetTimeFormat("H:mm:ss ") .. "+0800",
                content = "test content 测试一下" .. i,
                age = i,
                pagetype = f(i),
                pageid = i
            }

            System.os.GetUrl({
                url = upsert_to,
                method = "POST",
                json = true,
                form = data
            }, function(err, data) 
                finish_count = finish_count + 1;
                if (finish_count == (limit)) then
                    resume(err, data)
                end
            end
            );
        end

        err, data = yield()
    end

    return errors:wrap(err, data)
end

