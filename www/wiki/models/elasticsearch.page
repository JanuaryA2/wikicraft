<?npl
--[[

]]
include_once("./abstract/base.page");
local elasticsearch = inherit(models.abstract.base, gettable("models.elasticsearch"))


-- 指定host和port
function elasticsearch:connect(params)
    params = params or {}
    self.host = params.host or "localhost"
    self.port = params.port or 9200
    self.url = format("http://%s:%d/", self.host, self.port)
end


-- 定位index，type
function elasticsearch:locator(params)
    local _index = ""
    local _type = ""
    local _id = ""

    if params.id then
        _id = params.id .. "/"
    end

    if params.type then
        _type = params.type .. "/"
    else
        _id = ""
    end

    if params.index then
        _index = params.index .. "/"
    else
        _type = ""
        _id = ""
    end

    params.index = nil
    params.type = nil
    params.id = nil

    return format("%s%s%s%s", self.url, _index, _type, _id)
end


-- 插入一条数据
function elasticsearch:insertOne(params)
    if (not params.index) or (not params.type) or (params.id) then
        return errors:wrap(errors.REQUEST_PARAMS_ERROR)
    end

    -- 生成与es交互的url
    local location = self:locator(params)
    local insert_to = location
    params.index = nil
    params.type = nil

    -- 发送请求
    return self:sendToES({send_to=insert_to, method="POST", form=params})
end


-- 只能通过id更新
function elasticsearch:updateOne(params)
    if (not params.index) or (not params.type) or (not params.id) then
        return errors:wrap(errors.REQUEST_PARAMS_ERROR)
    end

    local location = self:locator(params)
    local update_to = location .. "_update"
    params.index = nil
    params.type = nil
    params.id = nil

    local body = {doc = params}
    return self:sendToES({send_to=update_to, method="POST", form=body})
end


-- 只能通过单字段查找
function elasticsearch:findOne(params)
    local location = self:locator(params)
    local search_in = location.. "_search"
    params.index = nil
    params.type = nil
    params.id = nil

    if params.access_url then
        params["access_url.raw"] = params.access_url
        params.access_url = nil
    end

    local body = {
        query = {
            constant_score = { 
                filter = {
                    term = params
                }
            }
        }
    }

    return self:sendToES({send_to=search_in, method="GET", form=body})
end


-- 只能通过id删除
function elasticsearch:deleteOne(params)
    if (not params.index) or (not params.type) or (not params.id) then
        return errors:wrap(errors.REQUEST_PARAMS_ERROR)
    end

    local location = self:locator(params)

    return self:sendToES({send_to=location, method="DELETE"})
end


-- 搜索入口 当前限定全文搜索page信息
function elasticsearch:api_search(params)
    self:connect({host="localhost", port=9200})
    if (not params.q) then
        return errors:wrap(errors.REQUEST_PARAMS_ERROR)
    end

    params = self:params_wrapper(params)
    local location = self:locator(params)
    local search_in = location .. "_search"
    local body = {}

    -- 生成查询表
    body = self:query_generator(params)

    -- 高亮处理
    if params.highlight then
        body.highlight = {fields = self:highlight_fields_generator(params)}
    end

    -- 排序处理
    if params.sort then
        body.sort = params.sort      -- array
    end

    -- 分页、返回数量处理
    body.size = params.size
    body.from = params.from

    return self:sendToES({send_to=search_in, method="GET", form=body})
end


-- 过滤参数
function elasticsearch:params_wrapper(params)
    -- 过滤不需要的参数
    local new_params = {
        q = params.q,
        type = params.type,
        index = params.index,
        highlight = params.highlight,
        size = params.size,
        from = params.from,
        sort = params.sort,
        fields = params.fields,
        body = params.body,
        advanced = params.advanced
    }

    new_params.advanced = 0 -- 暂时禁用高级搜索

    if (not new_params.size) or (tonumber(new_params.size) > 500) then new_params.size = 500 end
    if (not new_params.highlight) then new_params.highlight = 1 end
    if (new_params.advanced == 0) then new_params.body = nil end  --暂时禁止直接传入body

    if (not new_params.type) or (new_params.type == "page") then
        new_params.fields = {'tags', 'content', 'username', 'sitename', 'pagename'}
    end

    return new_params
end


-- 生成查询表，暂时只用match
function elasticsearch:query_generator(params)
    local query = {}

    -- 单字段搜索
    if (#params.fields == 1) then
        local match = {}
        match[params.fields[1]] = params.q
        query = {match = match}

    -- 多字段搜索
    elseif (#params.fields > 1) then
        query = {
        multi_match = {
            query = params.q,   --string
            fields = params.fields   --array
            }
        }
    end

    return {query=query}
end


-- 指定高亮字段
function elasticsearch:highlight_fields_generator(params)
    local highlight_fields = {}

    for i, field in ipairs(params.fields) do
        highlight_fields[field] = {}
    end

    return highlight_fields
end


-- 遍历数据
-- function elasticsearch:scroll(params)
--     -- body
-- end


-- 批量写操作
function elasticsearch:bulk(params)
    if (not params.data) then
        params.flag = "elasticsearch:bulk"
        log(params, true)
        return errors:wrap(errors.REQUEST_PARAMS_ERROR)
    end

    local location = self:locator(params)
    local send_to = format("%s_bulk", location)
    return self:sendToES({send_to=send_to, postfields=params.data})
end


-- 向ES发送请求
function elasticsearch:sendToES(params)
    if (not params.send_to) then
        return errors:wrap(errors.REQUEST_PARAMS_ERROR)
    end

    if (params.form) and (params.postfields) then
        return errors:wrap(errors.REQUEST_PARAMS_ERROR)
    end

    local info = {}
    info.url = params.send_to
    info.method = params.method or "GET"
    info.form = params.form
    info.json = true

    if (params.postfields) then
        info.postfields = params.postfields
        info.method = nil
    end

    System.os.GetUrl(info, resume)
    local err, result = yield()
    return errors:wrap(err, result.data)
end

